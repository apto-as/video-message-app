#!/bin/bash

# EC2„Ç§„É≥„Çπ„Çø„É≥„ÇπÂà∂Âæ°„Çπ„ÇØ„É™„Éó„Éà
# Â§ú„Å´ÂÅúÊ≠¢„ÄÅÊúù„Å´Ëµ∑Âãï„Åô„Çã„Åü„ÇÅ„ÅÆ‰æøÂà©„Çπ„ÇØ„É™„Éó„Éà

EC2_INSTANCE_IP="3.115.141.166"
SSH_KEY="$HOME/.ssh/video-app-key.pem"

# Ëâ≤‰ªò„ÅçÂá∫Âäõ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

usage() {
    echo "Usage: $0 {start|stop|restart|status|ssh|logs}"
    echo ""
    echo "Commands:"
    echo "  start   - EC2„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÇíËµ∑Âãï"
    echo "  stop    - EC2„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÇíÂÅúÊ≠¢Ôºà„Ç≥„Çπ„ÉàÂâäÊ∏õÔºâ"
    echo "  restart - EC2„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÇíÂÜçËµ∑Âãï"
    echo "  status  - „Ç§„É≥„Çπ„Çø„É≥„Çπ„Å®„Çµ„Éº„Éì„Çπ„ÅÆÁä∂ÊÖãÁ¢∫Ë™ç"
    echo "  ssh     - EC2„Å´SSHÊé•Á∂ö"
    echo "  logs    - „Çµ„Éº„Éì„Çπ„É≠„Ç∞„ÇíË°®Á§∫"
    exit 1
}

# AWS CLI„Åå„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
check_aws_cli() {
    if ! command -v aws &> /dev/null; then
        echo -e "${RED}Error: AWS CLI is not installed${NC}"
        echo "Install with: brew install awscli"
        exit 1
    fi
}

# „Ç§„É≥„Çπ„Çø„É≥„ÇπID„ÇíÂèñÂæó
get_instance_id() {
    aws ec2 describe-instances \
        --filters "Name=ip-address,Values=$EC2_INSTANCE_IP" \
        --query "Reservations[0].Instances[0].InstanceId" \
        --output text 2>/dev/null
}

# „Ç§„É≥„Çπ„Çø„É≥„Çπ„ÇíËµ∑Âãï
start_instance() {
    check_aws_cli
    local instance_id=$(get_instance_id)
    
    if [ -z "$instance_id" ] || [ "$instance_id" = "None" ]; then
        echo -e "${RED}Error: Instance not found for IP $EC2_INSTANCE_IP${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}Starting EC2 instance: $instance_id${NC}"
    aws ec2 start-instances --instance-ids "$instance_id"
    
    echo "Waiting for instance to be running..."
    aws ec2 wait instance-running --instance-ids "$instance_id"
    
    # Êñ∞„Åó„ÅÑ„Éë„Éñ„É™„ÉÉ„ÇØIP„ÇíÂèñÂæó
    local new_ip=$(aws ec2 describe-instances \
        --instance-ids "$instance_id" \
        --query "Reservations[0].Instances[0].PublicIpAddress" \
        --output text)
    
    echo -e "${GREEN}‚úÖ Instance started successfully!${NC}"
    echo -e "New Public IP: ${YELLOW}$new_ip${NC}"
    
    # IP„ÅåÂ§â„Çè„Å£„ÅüÂ†¥Âêà„ÅÆË≠¶Âëä
    if [ "$new_ip" != "$EC2_INSTANCE_IP" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Warning: Public IP has changed!${NC}"
        echo "Old IP: $EC2_INSTANCE_IP"
        echo "New IP: $new_ip"
        echo "You may need to update DNS records or configurations."
    fi
    
    echo ""
    echo "Waiting for services to start (30 seconds)..."
    sleep 30
    
    # „Çµ„Éº„Éì„ÇπÁä∂ÊÖãÁ¢∫Ë™ç
    check_services "$new_ip"
}

# „Ç§„É≥„Çπ„Çø„É≥„Çπ„ÇíÂÅúÊ≠¢
stop_instance() {
    check_aws_cli
    local instance_id=$(get_instance_id)
    
    if [ -z "$instance_id" ] || [ "$instance_id" = "None" ]; then
        echo -e "${RED}Error: Instance not found for IP $EC2_INSTANCE_IP${NC}"
        exit 1
    fi
    
    echo -e "${YELLOW}Stopping EC2 instance: $instance_id${NC}"
    echo "This will save costs while the instance is stopped."
    
    # Á¢∫Ë™ç„Éó„É≠„É≥„Éó„Éà
    read -p "Are you sure you want to stop the instance? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Cancelled."
        exit 0
    fi
    
    aws ec2 stop-instances --instance-ids "$instance_id"
    
    echo "Waiting for instance to stop..."
    aws ec2 wait instance-stopped --instance-ids "$instance_id"
    
    echo -e "${GREEN}‚úÖ Instance stopped successfully!${NC}"
    echo "üí∞ You are now saving money on compute costs!"
}

# „Ç§„É≥„Çπ„Çø„É≥„Çπ„ÇíÂÜçËµ∑Âãï
restart_instance() {
    check_aws_cli
    local instance_id=$(get_instance_id)
    
    if [ -z "$instance_id" ] || [ "$instance_id" = "None" ]; then
        echo -e "${RED}Error: Instance not found for IP $EC2_INSTANCE_IP${NC}"
        exit 1
    fi
    
    echo -e "${YELLOW}Restarting EC2 instance: $instance_id${NC}"
    aws ec2 reboot-instances --instance-ids "$instance_id"
    
    echo "Waiting for instance to be available..."
    sleep 60
    
    check_services "$EC2_INSTANCE_IP"
}

# „Çµ„Éº„Éì„ÇπÁä∂ÊÖãÁ¢∫Ë™ç
check_services() {
    local ip=${1:-$EC2_INSTANCE_IP}
    
    echo -e "\n${YELLOW}Checking services on $ip...${NC}"
    
    # Backend
    if curl -s --max-time 5 "https://$ip/api/health" > /dev/null 2>&1; then
        echo -e "‚úÖ Backend API: ${GREEN}Running${NC}"
    else
        echo -e "‚ùå Backend API: ${RED}Not responding${NC}"
    fi
    
    # OpenVoice (via SSH)
    if ssh -o ConnectTimeout=5 -i "$SSH_KEY" -p 22 "ec2-user@$ip" "curl -s http://localhost:8001/health" > /dev/null 2>&1; then
        echo -e "‚úÖ OpenVoice: ${GREEN}Running${NC}"
    else
        echo -e "‚ùå OpenVoice: ${RED}Not responding${NC}"
    fi
    
    # Frontend
    if curl -s --max-time 5 "https://$ip" > /dev/null 2>&1; then
        echo -e "‚úÖ Frontend: ${GREEN}Accessible${NC}"
    else
        echo -e "‚ùå Frontend: ${RED}Not accessible${NC}"
    fi
    
    echo ""
    echo -e "Access your application at: ${GREEN}https://$ip${NC}"
}

# „Ç§„É≥„Çπ„Çø„É≥„ÇπÁä∂ÊÖãÁ¢∫Ë™ç
check_status() {
    check_aws_cli
    local instance_id=$(get_instance_id)
    
    if [ -z "$instance_id" ] || [ "$instance_id" = "None" ]; then
        echo -e "${RED}Error: Instance not found for IP $EC2_INSTANCE_IP${NC}"
        exit 1
    fi
    
    echo -e "${YELLOW}Instance Status for $instance_id:${NC}"
    
    local state=$(aws ec2 describe-instances \
        --instance-ids "$instance_id" \
        --query "Reservations[0].Instances[0].State.Name" \
        --output text)
    
    local public_ip=$(aws ec2 describe-instances \
        --instance-ids "$instance_id" \
        --query "Reservations[0].Instances[0].PublicIpAddress" \
        --output text)
    
    case $state in
        "running")
            echo -e "State: ${GREEN}$state${NC}"
            echo "Public IP: $public_ip"
            check_services "$public_ip"
            ;;
        "stopped")
            echo -e "State: ${YELLOW}$state${NC}"
            echo "üí∞ Instance is stopped (saving costs)"
            ;;
        "stopping"|"pending"|"shutting-down"|"terminated")
            echo -e "State: ${RED}$state${NC}"
            ;;
        *)
            echo -e "State: $state"
            ;;
    esac
}

# SSHÊé•Á∂ö
ssh_connect() {
    echo -e "${GREEN}Connecting to EC2 instance...${NC}"
    ssh -i "$SSH_KEY" -p 22 "ec2-user@$EC2_INSTANCE_IP"
}

# „É≠„Ç∞Ë°®Á§∫
show_logs() {
    echo -e "${YELLOW}Showing service logs...${NC}"
    ssh -i "$SSH_KEY" -p 22 "ec2-user@$EC2_INSTANCE_IP" << 'ENDSSH'
echo "=== OpenVoice Logs ==="
sudo journalctl -u openvoice -n 20 --no-pager
echo ""
echo "=== Docker Compose Logs ==="
cd /home/ec2-user/video-message-app/video-message-app
docker-compose logs --tail=20
ENDSSH
}

# „É°„Ç§„É≥„É≠„Ç∏„ÉÉ„ÇØ
case "$1" in
    start)
        start_instance
        ;;
    stop)
        stop_instance
        ;;
    restart)
        restart_instance
        ;;
    status)
        check_status
        ;;
    ssh)
        ssh_connect
        ;;
    logs)
        show_logs
        ;;
    *)
        usage
        ;;
esac